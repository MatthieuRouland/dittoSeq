% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dittoBarPlot.R
\name{dittoBarPlot}
\alias{dittoBarPlot}
\title{Outputs a stacked bar plot to show the percent composition of samples or other cell groupings}
\usage{
dittoBarPlot(var, object = DEFAULT, group.by = "Sample",
  scale = c("percent", "count"), cells.use = NULL, data.out = FALSE,
  do.hover = FALSE, color.panel = dittoColors(),
  colors = seq_along(color.panel), y.breaks = NA, min = NULL,
  max = NULL, var.labels.rename = NULL, var.labels.reorder = NULL,
  x.labels = NULL, x.labels.rotate = TRUE, x.reorder = NULL,
  theme = theme_classic(), xlab = group.by, ylab = "make",
  main = "make", sub = NULL, legend.show = TRUE,
  legend.title = NULL)
}
\arguments{
\item{var}{String name of a metadata that contains discrete data, or a factor or vector containing such data for all cells/samples in the target \code{object}. REQUIRED.}

\item{object}{A Seurat, SingleCellExperiment, or \linkS4class{RNAseq} object to work with, OR the name of the object in "quotes".
REQUIRED, unless '\code{DEFAULT <- "object"}' has been run.}

\item{group.by}{String representing the name of a "metadata" to use for separating the cells/samples into discrete groups. REQUIRED.}

\item{scale}{"count" or "percent". Sets whether data should be shown as raw counts or scaled to 1 and shown as a percentage.}

\item{cells.use}{String vector of cells'/samples' names which should be included.
Alternatively, a Logical vector, the same length as the number of cells in the object, which sets which cells to include.
For the typically easier logical method, provide \code{USE} in \code{object@cell.names[USE]} OR \code{colnames(object)[USE]}).

NOTE: When \code{cells.use} is combined with \code{scale = "percent"} left out cells are not considered in calculating percentages. Percents will always total to 1.}

\item{data.out}{Logical which sets whether to output a dataframe containing the underlying data instead of outputing the plot itself.}

\item{do.hover}{Logical which sets whether the ggplot output should be converted to a ggplotly object with data about individual bars displayed when you hover your cursor over them.}

\item{color.panel}{String vector which sets the colors to draw from. \code{dittoColors()} by default.}

\item{colors}{Integer vector, the indexes / order, of colors from color.panel to actually use}

\item{y.breaks}{Numeric vector which indicates the plots major gridlines. c(break1,break2,break3,etc.)}

\item{min, max}{Scalars which control the zoom of the plot.
These inputs set the minimum / maximum values of the y-axis.
Default = set based on the limits of the data, 0 to 1 for \code{scale = "percent"}, or 0 to maximum count for 0 to 1 for \code{scale = "count"}.}

\item{var.labels.rename}{String vector which renames for the identities of \code{var} groupings.}

\item{var.labels.reorder}{Integer vector. A sequence of numbers, from 1 to the number of distinct var labels, for rearranging the order of labels' groupings within the plot.

Method: Make a first plot without this input.
Then, treating the top-most grouping as index 1, and the bottom-most as index n.
Values of \code{var.labels.reorder} should be these indices, but in the order that you would like them rearranged to be.}

\item{x.labels}{String vector which will replaceme the x-axis grouping labels.
The first component of \code{x.labels} sets the name for the first x-axis grouping.}

\item{x.labels.rotate}{Logical which sets whether the x-axis grouping labels should be rotated.  Default = FALSE = vertical labels.}

\item{x.reorder}{Integer vector. A sequence of numbers, from 1 to the number of groupings, for rearranging the order of x-axis groupings.

Method: Make a first plot without this input.
Then, treating the leftmost grouping as index 1, and the rightmost as index n.
Values of \code{x.reorder} should be these indices, but in the order that you would like them rearranged to be.}

\item{theme}{A ggplot theme which will be applied before dittoSeq adjustments. Default = \code{theme_classic()}. See \code{https://ggplot2.tidyverse.org/reference/ggtheme.html} for other options.}

\item{xlab}{String which sets the grouping-axis label (=x-axis for box and violin plots, y-axis for ridgeplots).
Default is \code{group.by} so it defaults to the name of the grouping information.
Set to \code{NULL} to remove.}

\item{ylab}{String, sets the continuous-axis label (=y-axis for box and violin plots, x-axis for ridgeplots).}

\item{main}{String, sets the plot title}

\item{sub}{String, sets the plot subtitle}

\item{legend.show}{Logical which sets whether the legend should be displayed. Default = TRUE.}

\item{legend.title}{String which adds a title to the legend.}
}
\value{
A ggplot plot where discrete data, grouped by sample, condition, cluster, etc. on the x-axis, is shown on the y-axis as either counts or percent-of-total-per-grouping in a stacked barplot.
Alternatively, if \code{data.out = TRUE} is added, outputs the underlying data for such a plot.
Alternatively, if \code{do.hover = TRUE} is added, outputs a plotly conversion of such a ggplot in which underlying data can be retrieved upon hovering the cursor over the plot.
}
\description{
Outputs a stacked bar plot to show the percent composition of samples or other cell groupings
}
\details{
The function creates a dataframe containing counts and percent makeup of \code{var} identities for each x-axis grouping (determined by the \code{group.by} input).
If a set of cells/samples to use is indicated with the \code{cells.use} input, only those cells/samples are used for counts and percent makeup calculations.
Then, a vertical bar plot is generated (\code{ggplot2::geom_col()}) showing either percent makeup if
\code{scale = "percent"}, which is the default, or raw counts if \code{scale = "count"}.

If \code{data.out} is set to \code{TRUE}, just the dataframe will be returned, and not the plot.

If \code{do.hover} is set to \code{TRUE}, the ggplot will be converted to a plotly object and underlying data will be displayed upon hover.

Many characteristics of the plot can be adjusted using discrete inputs:
\itemize{
\item Colors can be adjusted with \code{color.panel} and/or \code{colors}.
\item y-axis zoom and tick marks can be adjusted using \code{min}, \code{max}, and \code{y.breaks}.
\item Titles can be adjusted with \code{main}, \code{sub}, \code{xlab}, \code{ylab}, and \code{legend.title} arguments.
\item The legend can be removed by setting \code{legend.show = FALSE}.
\item x-axis labels and groupings can be changed / reordered using \code{x.labels} and \code{x.reorder}, and rotation of these labels can be turned off with \code{x.labels.rotate = FALSE}.
\item y-axis \code{var}-group labels and their order can be changed / reordered using \code{var.labels} and \code{var.labels.reorder}.
}
}
\examples{
library(Seurat)
pbmc <- pbmc_small

dittoBarPlot("RNA_snn_res.0.8", object = "pbmc", group.by = "ident")
dittoBarPlot("RNA_snn_res.0.8", object = "pbmc", group.by = "ident",
    scale = "count")

# Note: if DEFAULT <- "pbmc" is run beforehand,
  # the object input can be skipped completely.
DEFAULT <- "pbmc"
dittoBarPlot("RNA_snn_res.0.8", group.by = "ident")

# Accessing underlying data:
# as dataframe
dittoBarPlot("RNA_snn_res.0.8", object = "pbmc", group.by = "ident",
    data.out = TRUE)
# through hovering the cursor over the relevant parts of the plot
dittoBarPlot("RNA_snn_res.0.8", object = "pbmc", group.by = "ident",
    do.hover = TRUE)
}
