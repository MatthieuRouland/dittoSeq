% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dittoBarPlot.R
\name{dittoBarPlot}
\alias{dittoBarPlot}
\title{Outputs a stacked bar plot to show the percent composition of samples or other cell groupings}
\usage{
dittoBarPlot(var, object = DEFAULT, group.by = "Sample",
  scale = c("percent", "count"), cells.use = NULL, data.out = FALSE,
  do.hover = FALSE, color.panel = dittoColors(),
  colors = seq_along(color.panel), y.breaks = NA,
  var.labels.rename = NA, x.labels = NULL, x.labels.rotate = TRUE,
  x.reorder = NULL, theme = theme_classic(), xlab = group.by,
  ylab = "make", main = "make", sub = NULL, legend.show = TRUE,
  legend.title = NULL)
}
\arguments{
\item{var}{String name of a metadata that contains discrete data, or a factor or vector containing such data for all cells/samples in the target \code{object}. REQUIRED.}

\item{object}{A Seurat, SingleCellExperiment, or \linkS4class{RNAseq} object, or the name of the object in "quotes". REQUIRED, unless `DEFAULT <- "object"` has been run.}

\item{group.by}{String representing the name of a "metadata" to use for separating the cells/samples into discrete groups. REQUIRED.}

\item{scale}{"count" or "percent". Sets whether data should be shown as raw counts or scaled to 1 and shown as a percentage.}

\item{cells.use}{String vector of cells'/samples' names which should be included OR or a logical vector that is the same length as the number of cells/samples in the target \code{object} which sets which cells to include (a.k.a. \code{USE} in \code{colnames(object)[USE]}).

NOTE: When \code{cells.use} is combined with \code{scale = "percent"} left out cells are not considered in calculating percentages. Percents will always total to 1.}

\item{data.out}{Logical which to output a dataframe containing the underlying data instead of outputing the plot itself.}

\item{do.hover}{Logical which sets whether the ggplot output should be converted to a ggplotly object with data about individual bars displayed when you hover your cursor over them.
Data displayed with be the label, the count, and the percentage. ('data.hover' argument is not used with this plotting function.)}

\item{color.panel}{String vector which sets the colors to draw from. \code{dittoColors()} by default.}

\item{colors}{Integer vector, the indexes / order, of colors from color.panel to actually use}

\item{y.breaks}{Numeric vector which indicates the plots major gridlines. c(break1,break2,break3,etc.)
Note: The maximum value of this vector will set the maximum value portrayed, even if the data extends beyond this value.}

\item{var.labels.rename}{Character vector which renames for the identities of \code{var} groupings.}

\item{x.labels}{String vector which will replacement the x-axis grouping labels.
The first component of \code{x.labels} sets the name for the first x-axis grouping.}

\item{x.labels.rotate}{Logical which sets whether the x-axis grouping labels should be rotated.  Default = FALSE = vertical labels.}

\item{x.reorder}{Integer vector. A sequence of numbers, from 1 to the number of groupings, for rearranging the order of x-axis groupings.

Method: Make a first plot without this input.
Then, treating the leftmost grouping as index 1, and the rightmost as index n.
Values of x.reorder should be these indices, but in the order that you would like them rearranged to be.}

\item{theme}{ggplot theme. Default = theme_classic()}

\item{xlab}{String which sets the text title for the x-axis. \code{group.by} by default. Set to \code{NULL} to remove.}

\item{ylab}{String which sets the text title for the y-axis. Auto-generated by default. Set to \code{NULL} to remove.}

\item{main}{String, sets the plot title}

\item{sub}{String, sets the plot subtitle}

\item{legend.show}{Logical which sets whether the legend should be displayed. Default = TRUE.}

\item{legend.title}{Character which adds a title to the legend.}
}
\value{
A ggplot plot where discrete data, grouped by sample, condition, cluster, etc. on the x-axis, is shown on the y-axis as either counts or percent-of-total-per-grouping in a stacked barplot.
Alternatively, if \code{data.out = TRUE} is added, outputs the underlying data for such a plot.
Alternatively, if \code{do.hover = TRUE} is added, outputs a plotly conversion of such a ggplot in which underlying data can be retrieved upon hovering the cursor over the plot.
}
\description{
Outputs a stacked bar plot to show the percent composition of samples or other cell groupings
}
\examples{
library(Seurat)
pbmc <- pbmc_small

dittoBarPlot("RNA_snn_res.0.8", object = "pbmc", group.by = "ident")
dittoBarPlot("RNA_snn_res.0.8", object = "pbmc", group.by = "ident",
    scale = "count")

# Note: if DEFAULT <- "pbmc" is run beforehand,
  # the object input can be skipped completely.
DEFAULT <- "pbmc"
dittoBarPlot("RNA_snn_res.0.8", group.by = "ident")

# Accessing underlying data:
# as dataframe
dittoBarPlot("RNA_snn_res.0.8", object = "pbmc", group.by = "ident",
    data.out = TRUE)
# through hovering the cursor over the relevant parts of the plot
dittoBarPlot("RNA_snn_res.0.8", object = "pbmc", group.by = "ident",
    do.hover = TRUE)
}
