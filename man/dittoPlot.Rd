% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dittoPlot.R
\name{dittoPlot}
\alias{dittoPlot}
\alias{dittoRidgePlot}
\alias{dittoBoxPlot}
\title{Plots continuous data for cutomizable cells'/samples' groupings on a y-axis}
\usage{
dittoPlot(
  object,
  var,
  group.by,
  color.by = group.by,
  shape.var = NULL,
  cells.use = NULL,
  plots = c("jitter", "vlnplot"),
  assay = .default_assay(object),
  slot = .default_slot(object),
  adjustment = NULL,
  do.hover = FALSE,
  hover.data = var,
  color.panel = dittoColors(),
  colors = seq_along(color.panel),
  shape.panel = c(16, 15, 17, 23, 25, 8),
  theme = theme_classic(),
  main = "make",
  sub = NULL,
  ylab = "make",
  y.breaks = NULL,
  min = NULL,
  max = NULL,
  xlab = group.by,
  x.labels = NULL,
  x.labels.rotate = NA,
  x.reorder = NULL,
  jitter.size = 1,
  jitter.width = 0.2,
  jitter.color = "black",
  jitter.shape.legend.size = NA,
  jitter.shape.legend.show = TRUE,
  boxplot.width = 0.2,
  boxplot.color = "black",
  boxplot.show.outliers = NA,
  boxplot.fill = TRUE,
  vlnplot.lineweight = 1,
  vlnplot.width = 1,
  vlnplot.scaling = "area",
  ridgeplot.lineweight = 1,
  ridgeplot.scale = 1.25,
  add.line = NULL,
  line.linetype = "dashed",
  line.color = "black",
  legend.show = TRUE,
  legend.title = "make",
  data.out = FALSE
)

dittoRidgePlot(..., plots = c("ridgeplot"))

dittoBoxPlot(..., plots = c("boxplot", "jitter"))
}
\arguments{
\item{object}{A Seurat or SingleCellExperiment object to work with}

\item{var}{Single string representing the name of a metadata or gene, OR a numeric vector with length equal to the total number of cells/samples in the dataset.
This is the data that will be displayed.}

\item{group.by}{String representing the name of a metadata to use for separating the cells/samples into discrete groups. REQUIRED.}

\item{color.by}{String representing the name of a metadata to use for setting color.
Affects boxplot, vlnplot, and ridgeplot fills.  Default's to \code{group.by} so this input can be skipped if both are the same.}

\item{shape.var}{Single string representing the name of a metadata to use for setting the shapes of the jitter points.  When not provided, all cells/samples will be represented with dots.}

\item{cells.use}{String vector of cells'/samples' names which should be included.
Alternatively, a Logical vector, the same length as the number of cells in the object, which sets which cells to include.
For the typically easier logical method, provide \code{USE} in \code{object@cell.names[USE]} OR \code{colnames(object)[USE]}).}

\item{plots}{String vector which sets the types of plots to include: possibilities = "jitter", "boxplot", "vlnplot", "ridgeplot". See details section for more info.}

\item{assay, slot}{single strings or integer that set which data to use when plotting gene expression. See \code{\link{gene}} for more information.}

\item{adjustment}{When plotting gene expression (or antibody, or other forms of counts data), should that data be used directly (default) or should it be adjusted to be
\itemize{
\item{"z-score": scaled with the scale() function to produce a relative-to-mean z-score representation}
\item{"relative.to.max": divided by the maximum expression value to give percent of max values between [0,1]}
}}

\item{do.hover}{Logical. Default = \code{FALSE}.
If set to \code{TRUE} (and if there is a jitter - the data it will work with): object will be converted to a ggplotly object so that data about individual points will be displayed when you hover your cursor over them,
and 'hover.data' argument will be used to determine what data to use.

Note: Currently, incompatible with RidgePlots as plotly does not support the geom.}

\item{hover.data}{String vector, a list of variable names, c("meta1","gene1","meta2","gene2") which determines what data to show upon hover when do.hover is set to \code{TRUE}.}

\item{color.panel}{String vector which sets the colors to draw from. \code{dittoColors()} by default.}

\item{colors}{Integer vector, the indexes / order, of colors from color.panel to actually use}

\item{shape.panel}{Vector of integers corresponding to ggplot shapes which sets what shapes to use.
When discrete groupings are supplied by \code{shape.var}, this sets the panel of shapes which will be used.
When nothing is supplied to \code{shape.var}, only the first value is used.
Default is a set of 6, \code{c(16,15,17,23,25,8)}, the first being a simple, solid, circle.}

\item{theme}{A ggplot theme which will be applied before dittoSeq adjustments. Default = \code{theme_classic()}. See \code{https://ggplot2.tidyverse.org/reference/ggtheme.html} for other options.}

\item{main}{String, sets the plot title. Default = "make" and if left as make, a title will be automatically generated.  To remove, set to \code{NULL}.}

\item{sub}{String, sets the plot subtitle}

\item{ylab}{String, sets the continuous-axis label (=y-axis for box and violin plots, x-axis for ridgeplots).
Defaults to "\code{var}" or "\code{var} expression" if var is a gene.}

\item{y.breaks}{Numeric vector, a set of breaks that should be used as major gridlines. c(break1,break2,break3,etc.).}

\item{min, max}{Scalars which control the zoom of the plot.
These inputs set the minimum / maximum values of the data to show.
Default = set based on the limits of the data in var.}

\item{xlab}{String which sets the grouping-axis label (=x-axis for box and violin plots, y-axis for ridgeplots).
Default is \code{group.by} so it defaults to the name of the grouping information.
Set to \code{NULL} to remove.}

\item{x.labels}{String vector, c("label1","label2","label3",...) which overrides the names of the samples/groups.  NOTE: you need to give at least as many labels as there are discrete values in the group.by data.}

\item{x.labels.rotate}{Logical which sets whether the labels should be rotated.
Default: \code{TRUE} for violin and box plots, but \code{FALSE} for ridgeplots.}

\item{x.reorder}{Integer vector. A sequence of numbers, from 1 to the number of groupings, for rearranging the order of x-axis groupings.

Method: Make a first plot without this input.
Then, treating the leftmost grouping as index 1, and the rightmost as index n.
Values of x.reorder should be these indices, but in the order that you would like them rearranged to be.}

\item{jitter.size}{Scalar which sets the size of the jitter shapes.}

\item{jitter.width}{Scalar that sets the width/spread of the jitter in the x direction. Ignored in ridgeplots.}

\item{jitter.color}{String which sets the color of the jitter shapes}

\item{jitter.shape.legend.size}{Scalar which changes the size of the shape key in the legend.
If set to \code{NA}, \code{jitter.size} is used.}

\item{jitter.shape.legend.show}{Logical which sets whether the shapes legend will be shown is \code{shape.var} when jitter shape is determined by a variable.}

\item{boxplot.width}{Scalar which sets the width/spread of the boxplot in the x direction}

\item{boxplot.color}{String which sets the color of the lines of the boxplot}

\item{boxplot.show.outliers}{Logical, whether outliers should by including in the boxplot.
Default is \code{FALSE} when there is a jitter plotted, \code{TRUE} if there is no jitter.}

\item{boxplot.fill}{Logical, whether the boxplot should be filled in or not.
Note: when boxplot fill is turned off, outliers do not render.}

\item{vlnplot.lineweight}{Scalar which sets the thickness of the line that outlines the violin plots.}

\item{vlnplot.width}{Scalar which sets the width/spread of the jitter in the x direction}

\item{vlnplot.scaling}{String which sets how the widths of the of violin plots are set in relation to eachother.
Options are "area", "count", and "width". If the deafult is not right for your data, I recommend trying "width".
For a detailed explanation of each, see \code{\link{geom_violin}}.}

\item{ridgeplot.lineweight}{Scalar which sets the thickness of the ridgeplot outline.}

\item{ridgeplot.scale}{Scalar which sets the distance/overlap between ridgeplots.
A value of 1 means the tallest density curve just touches the baseline of the next higher one.
Higher numbers lead to greater overlap.  Default = 1.25}

\item{add.line}{numeric value(s) where a dashed horizontal line should go}

\item{line.linetype}{String which sets the type of line.  Any ggplot linetype should work.  Defaults to "dashed"}

\item{line.color}{String that sets the color(s) of the horizontal line(s)}

\item{legend.show}{Logical. Whether the legend should be displayed. Default = \code{TRUE}.}

\item{legend.title}{String or \code{NULL}, sets the title for the main legend which includes colors and data representations.
This input is set to \code{NULL} by default.}

\item{data.out}{Logical which sets whether just the plot should be output, or a list containing the plot (\code{p}) and data (\code{data}).  Note: plotly output is turned off in this setting, but hover.data is still calculated.}

\item{...}{arguments passed to dittoPlot by dittoRidgePlot and dittoBoxPlot.  Options are all the ones above.}
}
\value{
a ggplot or plotly where continuous data, grouped by sample, age, cluster, etc., shown on either the y-axis by a violin plot, boxplot, and/or jittered points, or on the x-axis by a ridgeplot with or without jittered points.
Alternatively, will return the data that would go into such a plot as well with \code{data.out=TRUE}
}
\description{
Plots continuous data for cutomizable cells'/samples' groupings on a y-axis
}
\details{
The function creates a dataframe containing the metadata or expression data associated with the given \code{var} (or if a vector of data is provided directly, it just uses that) plus metadata associated with the \code{group.by} and \code{color.by} variables.
The \code{assay} and \code{slot} inputs can be used to change what expression data is used when displaying gene expression.
If a set of cells to use is indicated with the \code{cells.use} input, the dataframe is then subset to include only those cells.
Then, a plot where data is grouped by the \code{group.by} metadata and colored by the \code{color.by} metadata is generated.

The \code{plots} argument determines the types of data representation that will be generated, as well as their order from back to front.
Options are \code{"jitter"}, \code{"boxplot"}, \code{"vlnplot"}, and \code{"ridgeplot"}.
Inclusion of \code{"ridgeplot"} overrides boxplot and violin plot and changes the plot to be horizontal.

\code{dittoRidgePlot} and \code{dittoBoxPlot} are included as wrappers of the basic \code{dittoPlot} function.
They change the default for the \code{plots} input to be \code{"ridgeplot"} and \code{c("boxplot","jitter")}, respectively.

If \code{data.out=TRUE}, a list containing the plot (\code{p}) and a the dataframe containing the underlying data (\code{data}) are returned.

If \code{do.hover=TRUE}, cell/sample information, determined by the \code{hover.data} input, is retrieved, added to the dataframe, and displayed
upon hovering the cursor over a jitter point.

Many characteristics of the plot can be adjusted using discrete inputs:
\itemize{
\item Each data representation has options which are controlled by variables that start with their associated string.
For example, all jitter adjustments, like \code{jitter.size}, start with "\code{jitter.}".
\item Color can be adjusted with \code{color.panel} and/or \code{colors} for discrete data, or \code{min}, \code{max}, \code{min.color}, and \code{max.color} for continuous data.
\item Shapes used in conjunction with \code{shape.var} can be adjusted with \code{shape.panel}.
\item Titles and axes labels can be adjusted with \code{main}, \code{sub}, \code{xlab}, \code{ylab}, and \code{legend.title} arguments.
\item The legend can be hidden by setting \code{legend.show = TRUE}.
\item y-axis zoom and tick marks can be adjusted using \code{min}, \code{max}, and \code{y.breaks}.
\item x-axis labels and groupings can be changed / reordered using \code{x.labels} and \code{x.reorder}, and rotation of these labels can be turned off with \code{x.labels.rotate = FALSE}.
\item Single or multiple value(s) can be provided to \code{add.line} to add horizontal (or vertical, for ridgeplots) lines at the values provided.
Linetype and color are set with \code{line.linetype}, which is "dashed" by default, and \code{line.color}, which is "black" by default.
}
}
\section{Functions}{
\itemize{
\item \code{dittoRidgePlot}: Plots continuous data for cutomizable cells'/samples' groupings horizontally in a desnsity representation

\item \code{dittoBoxPlot}: Plots continuous data for cutomizable cells'/samples' groupings in boxplot form
}}

\examples{
library(Seurat)
pbmc <- pbmc_small
dittoPlot(pbmc, "CD14", group.by = "RNA_snn_res.1", color.by = "RNA_snn_res.1")

# We can adjust the types of plots displayed with the plots input:
dittoPlot(pbmc, "CD14", group.by = "RNA_snn_res.1",
    plots = c("vlnplot", "boxplot", "jitter"),
    boxplot.fill = FALSE)

# Quickly make a Ridgeplot
dittoRidgePlot(pbmc, "CD14", group.by = "RNA_snn_res.1")

# Quickly make a Boxplot
dittoBoxPlot(pbmc, "CD14", group.by = "RNA_snn_res.1")

# Any of these can be combined with 'hovering' to retrieve specific info
#   about certain data points.  Just add 'do.hover = TRUE' and pick what
#   extra data to display by provide set of gene or metadata names to
#   'hover.data'.
#     Note: ggplotly plots ignores certain dittoSeq plot tweaks.
#     Also note: requires the plotly package
if (!requireNamespace("plotly")) {
    dittoBoxPlot(pbmc, "CD14", group.by = "RNA_snn_res.1",
        do.hover = TRUE, hover.data = c("MS4A1","RNA_snn_res.0.8","ident"))
}


}
\seealso{
\code{\link{multi_dittoPlot}} for easy creation of multiple dittoPlots that each focus on a different \code{var}

\code{\link{dittoPlotVarsAcrossGroups}} to create dittoPlots that show summarized the expression (or value for metadatas), accross groups, of multiple \code{vars} in a single plot.
}
\author{
Daniel Bunis
}
