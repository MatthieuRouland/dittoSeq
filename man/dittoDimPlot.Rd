% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DittoDimPlot.R
\name{dittoDimPlot}
\alias{dittoDimPlot}
\title{Shows data overlayed on a tsne, pca, or similar type of plot}
\usage{
dittoDimPlot(
  object,
  var = "ident",
  reduction.use = NA,
  size = 1,
  opacity = 1,
  dim.1 = 1,
  dim.2 = 2,
  cells.use = NULL,
  shape.var = NULL,
  split.var = NULL,
  extra.vars = NULL,
  show.others = TRUE,
  show.axes.numbers = TRUE,
  color.panel = dittoColors(),
  colors = seq_along(color.panel),
  shape.panel = c(16, 15, 17, 23, 25, 8),
  assay = .default_assay(object),
  slot = .default_slot(object),
  adjustment = NULL,
  main = "make",
  sub = NULL,
  xlab = "make",
  ylab = "make",
  theme = NA,
  legend.show = TRUE,
  legend.size = 5,
  legend.title = "make",
  shape.legend.size = 5,
  shape.legend.title = shape.var,
  do.ellipse = FALSE,
  do.label = FALSE,
  labels.size = 5,
  labels.highlight = TRUE,
  labels.repel = TRUE,
  rename.var.groups = NULL,
  rename.shape.groups = NULL,
  min.color = "#F0E442",
  max.color = "#0072B2",
  min = NULL,
  max = NULL,
  legend.breaks = waiver(),
  legend.breaks.labels = waiver(),
  do.letter = FALSE,
  do.hover = FALSE,
  hover.data = var,
  hover.assay = .default_assay(object),
  hover.slot = .default_slot(object),
  hover.adjustment = NULL,
  add.trajectory.lineages = NULL,
  add.trajectory.curves = NULL,
  trajectory.cluster.meta,
  trajectory.arrow.size = 0.15,
  data.out = FALSE
)
}
\arguments{
\item{object}{A Seurat or SingleCellExperiment object to work with}

\item{var}{String name of a "gene" or "metadata" (or "ident" for a Seurat \code{object}) to use for coloring the plots.
This is the data that will be displayed for each cell/sample.
Alternatively, can be a vector of same length as there are cells/samples in the \code{object}.
Discrete or continuous data both work. REQUIRED.
REQUIRED, unless '\code{DEFAULT <- "object"}' has been run.}

\item{reduction.use}{String, such as "pca", "tsne", "umap", or "PCA", etc, which is the name of a dimensionality reduction slot within the object, and which sets what dimensionality reduction space within the object to use.

Default = the first dimensionality reduction slot inside the object named "umap", "tsne", or "pca", or the first dimensionality reduction slot if nonw of those exist.}

\item{size}{Number which sets the size of data points. Default = 1.}

\item{opacity}{Number between 0 and 1.
Great for when you have MANY overlapping points, this sets how solid the points should be:
1 = not see-through at all. 0 = invisible. Default = 1.
(In terms of typical ggplot variables, = alpha)}

\item{dim.1}{The component number to use on the x-axis.  Default = 1}

\item{dim.2}{The component number to use on the y-axis.  Default = 2}

\item{cells.use}{String vector of cells'/samples' names which should be included.
Alternatively, a Logical vector, the same length as the number of cells in the object, which sets which cells to include.
For the typically easier logical method, provide \code{USE} in \code{object@cell.names[USE]} OR \code{colnames(object)[USE]}).}

\item{shape.var}{Variable for setting the shape of cells/samples in the plot.  Note: must be discrete.  Can be the name of a gene or meta-data.  Alternatively, can be "ident" for clusters of a Seurat object.  Alternatively, can be a numeric of length equal to the total number of cells/samples in object.

Note: shapes can be harder to see, and to process mentally, than colors.
Even as a color blind person myself writing this code, I recommend use of colors for variables with many discrete values.}

\item{split.var}{Single string giving a metadata (Note: must be discrete.) that will set the groups used to split the cells/samples into multiple plots with \code{ggplot + facet_wrap}.

Alternatively, can be a directly supplied string vector or a factor of length equal to the total number of cells/samples in \code{object}.}

\item{extra.vars}{String vector providing any extra metadata to be stashed in the dataframe supplied to \code{ggplot(data)}.

Useful for making custom alterations \emph{after} dittoSeq plot generation.}

\item{show.others}{Logical. TRUE by default, whether other cells should be shown in the background in light gray.}

\item{show.axes.numbers}{Logical which controls whether the axes values should be displayed.}

\item{color.panel}{String vector which sets the colors to draw from. \code{dittoColors()} by default, see \code{\link{dittoColors}} for contents.}

\item{colors}{Integer vector, the indexes / order, of colors from color.panel to actually use}

\item{shape.panel}{Vector of integers corresponding to ggplot shapes which sets what shapes to use.
When discrete groupings are supplied by \code{shape.var}, this sets the panel of shapes.
When nothing is supplied to \code{shape.var}, only the first value is used.
Default is a set of 6, \code{c(16,15,17,23,25,8)}, the first being a simple, solid, circle.

Note: Unfortunately, shapes can be hard to see when points are on top of each other & they are more slowly processed by the brain.
For these reasons, even as a color blind person myself writing this code, I recommend use of colors for variables with many discrete values.}

\item{assay, slot}{single strings or integer that set which data to use when plotting gene expression. See \code{\link{gene}} for more information.}

\item{adjustment}{When plotting gene expression (or antibody, or other forms of counts data), should that data be used directly (default) or should it be adjusted to be
\itemize{
\item{"z-score": scaled with the scale() function to produce a relative-to-mean z-score representation}
\item{"relative.to.max": divided by the maximum expression value to give percent of max values between [0,1]}
}}

\item{main}{String, sets the plot title.
Default title is automatically generated if not given a specific value.  To remove, set to \code{NULL}.}

\item{sub}{String, sets the plot subtitle}

\item{xlab, ylab}{Strings which set the labels for the axes.
Default labels are generated if you do not give this a specific value.
To remove, set to \code{NULL}.}

\item{theme}{A ggplot theme which will be applied before dittoSeq adjustments. Default = \code{theme_bw()}. See \code{https://ggplot2.tidyverse.org/reference/ggtheme.html} for other options.}

\item{legend.show}{Logical. Whether the legend should be displayed. Default = \code{TRUE}.}

\item{legend.size}{Number representing the size to increase the plotting of color legend shapes to (for discrete variable plotting).
Default = 5. *Enlarging the colors legend is incredibly helpful for making colors more distinguishable by color blind individuals.}

\item{legend.title}{String which sets the title for the main legend which includes the colors. Default = \code{NULL} normally, but \code{var} when a shape legend will also be shown.}

\item{shape.legend.size}{Number representing the size to increase the plotting of shapes legend shapes to.}

\item{shape.legend.title}{String which sets the title of the shapes legend.  Default is the \code{shape.var}}

\item{do.ellipse}{Logical. Whether the groups should be surrounded by an ellipse.}

\item{do.label}{Logical. Whether to add text labels at the center (median) of clusters for grouping vars}

\item{labels.size}{Size of the the labels text}

\item{labels.highlight}{Logical. Whether the labels should have a box behind them}

\item{labels.repel}{Logical, that sets whether the labels' placements will be adjusted with \link{ggrepel} to avoid intersections between labels and plot bounds.
TRUE by default.}

\item{rename.var.groups}{String vector which sets new names for the identities of \code{var} groups.}

\item{rename.shape.groups}{String vector which sets new names for the identities of \code{shape.var} groups.}

\item{min.color}{color for lowest values of var/min.  Default = yellow}

\item{max.color}{color for highest values of var/max.  Default = blue}

\item{min}{Number which sets the value associated with the minimum color.}

\item{max}{Number which sets the value associated with the maximum color.}

\item{legend.breaks}{Numeric vector which sets the discrete values to show in the color-scale legend for continuous data.}

\item{legend.breaks.labels}{String vector, with same length as \code{legend.breaks}, which renames what's displayed next to the tick marks of the color-scale.}

\item{do.letter}{Logical which sets whether letters should be added on top of the colored dots. For extended colorblindness compatibility.
NOTE: \code{do.letter} is ignored if \code{do.hover = TRUE} or \code{shape.var} is provided a metadata because
lettering is incompatible with plotly and with changing the dots' to be different shapes.}

\item{do.hover}{Logical which controls whether the object will be converted to a plotly object so that data about individual points will be displayed when you hover your cursor over them.
\code{hover.data} argument is used to determine what data to use.}

\item{hover.data}{String vector of gene and metadata names, example: \code{c("meta1","gene1","meta2","gene2")} which determines what data to show on hover when \code{do.hover} is set to \code{TRUE}.}

\item{hover.assay, hover.slot, hover.adjustment}{Similar to the non-hover versions, when showing expression data upon hover, these set what data will be shown.}

\item{add.trajectory.lineages}{List of vectors representing trajectory paths from start-cluster to end-cluster where vector contents are the names of clusters provided in the \code{trajectory.cluster.meta} input.

If the \code{\link[slingshot]{slingshot}} package was used for trajectory analysis, you can use \code{add.trajectory.lineages = SlingshotDataSet(SCE_with_slingshot)$lineages}. In future versions, I might build such retrieval in by default for SCEs.}

\item{add.trajectory.curves}{List of matrices, each representing coordinates for a trajectory path, from start to end, where matrix columns are x (\code{dim.1}) and y (\code{dim.2}).

Alternatively, a list of lists(/princurve objects) can be provided where the target matrices are named as "s" within the list. Thus, if the \code{\link[slingshot]{slingshot}} package was used for trajectory analysis, you can use \code{add.trajectory.curves = SlingshotDataSet(SCE_with_slingshot)$curves}}

\item{trajectory.cluster.meta}{String name of metadata containing the clusters that were used for generating trajectories.  Required when plotting trajectories using the \code{add.trajectory.lineages} method. Names of clusters inside the metadata should be the same as the contents of \code{add.trajectory.lineages} vectors.}

\item{trajectory.arrow.size}{Number representing the size of trajectory arrows, in inches.  Default = 0.15.}

\item{data.out}{Whether just the plot should be output, or a list with the plot and Target_data and Others_data dataframes.  Note: plotly output is turned off in this setting, but hover.data is still calculated.}
}
\value{
A ggplot or plotly object where colored dots (or other shapes) are overlayed onto a tSNE, PCA, UMAP, ..., plot of choice.
Alternatively, a list contatining the ggplot plus the data.frame(s) that went into building it.
}
\description{
Shows data overlayed on a tsne, pca, or similar type of plot
}
\details{
The function creates a dataframe containing the metadata or expression data associated with the given \code{var} (or if a vector of data is provided directly, it just uses that),
plus X and Y coordinates data determined by the \code{reduction.use} and \code{dim.1} (x-axis) and \code{dim.2} (y-axis) inputs.
The \code{assay}, \code{slot}, and \code{adjustment} inputs can be used to change what expression data is used when displaying gene expression.
If a metadata is given to \code{shape.var}, that is retrieved and added to the dataframe as well.

Next, if a set of cells or samples to use is indicated with the \code{cells.use} input, then the dataframe is split into \code{Target_data} and \code{Others_data} based on subsetting by the target cells/samples.

Finally, a scatter plot is then created using these dataframes where non-target cells will be displayed in gray if \code{show.others=TRUE},
and target cell data is displayed on top, colored based on the \code{var}-associated data, and with shapes determined by the \code{shape.var}-associated data.

If \code{data.out=TRUE}, a list containing three slots is output: the plot (named 'p'), a data.table containing the underlying data for target cells (named 'Target_data'), and a data.table containing the underlying data for non-target cells (named 'Others_data').

If \code{do.hover} is set to \code{TRUE}, the plot is coverted from ggplot to plotly &
cell/sample information, determined by the \code{hover.data} input, is retrieved, added to the dataframe, and displayed upon hovering the cursor over the plot.

Many characteristics of the plot can be adjusted using discrete inputs:
\itemize{
\item \code{size} and \code{opacity} can be used to adjust the size and transparency of the data points.
\item Color can be adjusted with \code{color.panel} and/or \code{colors} for discrete data, or \code{min}, \code{max}, \code{min.color}, and \code{max.color} for continuous data.
\item Shapes can be adjusted with \code{shape.panel}.
\item Color and shape labels can be changed using \code{rename.var.groups} and \code{rename.shape.groups}.
\item Titles and axes labels can be adjusted with \code{main}, \code{sub}, \code{xlab}, \code{ylab}, and \code{legend.title} arguments.
\item Legends can also be adjusted in other ways, using variables that all start with "\code{legend.}" for easy tab-completion lookup.
}

Additional Features: Many other tweaks and features can be added as well.
Each is accessible through autocompletion starting with "\code{do.}"\code{---} or "\code{add.}"\code{---},
and if additional inputs are involved in implementing or tweaking these, the associated inputs will start with the "\code{---.}":
\itemize{
\item If \code{do.label} is set to \code{TRUE}, labels will be added based on median centers of the discrete \code{var}-data groupings.
The size of the text in the labels can be adjusted using the \code{labels.size} input.
By default labels will repel eachother and the bounds of the plot, and labels will be highlighted with a white background.
Either of these can be turned off by setting \code{labels.repel=FALSE} or \code{labels.highlight=FALSE},
\item If \code{do.ellipse} is set to \code{TRUE}, ellipses will be added to highlight distinct \code{var}-data groups' positions based on median positions of their cell/sample components.
\item If \code{add.trajectory.lineages} is provided a list of vectors (each vector being cluster names from start-cluster-name to end-cluster-name), and a metadata name pointing to the relevant clustering information is provided to \code{trajectory.cluster.meta},
then median centers of the clusters will be calculated and arrows will be overlayed to show trajectory inference paths in the current dimmenionality reduction space.
\item If \code{add.trajectory.curves} is provided a list of matrices (each matrix containing x, y coordinates from start to end), paths and arrows will be overlayed to show trajectory inference curves in the current dimmenionality reduction space.
Arrow size is controlled with the \code{trajectory.arrow.size} input.
}
}
\examples{
pbmc <- Seurat::pbmc_small

# Display discrete data:
dittoDimPlot(pbmc, "RNA_snn_res.1")
# Display continuous data:
dittoDimPlot(pbmc, "CD14")

# To show currently set clustering for seurat objects, you can use "ident".
# To change the dimensional reduction type, use reduction.use.

# MANY addtional tweaks are possible.
# Also, many extra features are easy to add as well:
dittoDimPlot(pbmc, "ident", do.label = TRUE)
dittoDimPlot(pbmc, "ident", do.label = TRUE, do.ellipse = TRUE)
dittoDimPlot(pbmc, "CD3E", do.hover = TRUE,
    hover.data = c("CD14", "RNA_snn_res.0.8", "groups"))
dittoDimPlot(pbmc, "CD3E", add.trajectory.lineages = list(c(0:2), c(0,2)),
    trajectory.cluster.meta = "ident")
}
\seealso{
\code{\link{getGenes}} and \code{\link{getMetas}} to see what the \code{var}, \code{shape.var}, and \code{hover.data} options are.

\code{\link{importDittoBulk}} for how to create a \code{\link{SingleCellExperiment}} object from bulk seq data that dittoSeq functions can use &
\code{\link{addDimReduction}} for how to add calculated dimensionality reductions that \code{dittoDimPlot} can utilize.

\code{\link{dittoScatterPlot}} for showing very similar data representations, but where genes or metadata are wanted as the axes.

\code{\link{dittoPlot}} for an alternative continuous data display method where data is shown on a y- (or x-) axis.

\code{\link{dittoBarPlot}} for an alternative discrete data display and quantification method.
}
\author{
Daniel Bunis
}
