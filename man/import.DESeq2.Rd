% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Bulk RNAseq.R
\name{import.DESeq2}
\alias{import.DESeq2}
\title{Creates an RNAseq object from a DESeq object.}
\usage{
import.DESeq2(dds, run_PCA = FALSE, pc.genes = NULL, Ngenes = 2500,
  blind = FALSE, counts = NULL, percent.samples = 75)
}
\arguments{
\item{dds}{The output of running DESeq() on your data. = The DESeq2 object for your data. REQUIRED.}

\item{run_PCA}{TRUE/FALSE. Default is False. If set to true, prcomp PCA calculation will be carried out with the PCAcalc function.  var.genes, reductions$pca, exp.filter, and CVs slots will then all be populated. For more info, run ?PCAcalc}

\item{pc.genes}{NULL or vector of genes. Alternately to the method of genes selection used by PCAcalc by default, a set of genes can be given here.  Default = NULL. If left that way, a per condition expression filter will be applied, followed by a selection of Ngenes number of genes that have the highest coefficient of variation (CV=mean over sd).}

\item{Ngenes}{#. How many genes to use for the PCA calculation. (This number will ultimately be the length of the var.genes slot)}

\item{blind}{TRUE/FALSE. Whether rlog estimation should be blinded to sample info. Run `?rlog` for more info about whether it should.  Defaults to TRUE, but that is NOT the correct way for all experiments.}

\item{counts}{Matrix. The raw counts data matrix.  Not required but HIGHLY RECOMMENDED.}

\item{percent.samples}{# between 0 and 1. The percent of samples within each condition that must express the gene in order for a gene to be included in the PCA calculation.}
}
\value{
Outputs an RNAseq object.
}
\description{
The first step of visualization of DESeq-analyzed bulk RNAseq data is running this function. Doing will extract meta.data information from the DESeq object, data using the rlog function, and if run_PCA=TRUE, will populate all other slots as well.
}
\examples{

#Generate mock RNAseq counts and a DESeq object from the mock data
# count tables from RNA-Seq data
counts.table <- matrix(rnbinom(n=1000, mu=100, size=1/0.5), ncol=10)
colnames(counts.table) <- paste0("Sample",1:10)
conditions <- factor(rep(1:2, each=5))
# object construction
library(DESeq2)
dds <- DESeqDataSetFromMatrix(counts.table, DataFrame(conditions), ~ conditions)
dds <- DESeq(dds)

# Recommended usage
# obj <- import.DESeq2(dds, counts = counts.table, run_PCA = TRUE)
#NOTE: the PCA calculation fails on this fake data because of it was normally randomized.
# Minimal input:
obj <- import.DESeq2(dds)
}
